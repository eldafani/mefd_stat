#' @return data.frame o lista de data.frames con datos de indicadores
#' @importFrom rvest html_attr html_elements html_text read_html
#' @importFrom stringr str_match
#' @importFrom utils read.csv2, download.file
#'
#' @examples
#' \dontrun{
#' # Descarga desde página web (url_web)
#' mi_url <- "https://estadisticas.educacion.gob.es/EducaDynPx/educabase/index.htm?type=pcaxis&path=/no-universitaria/centros/centrosyunid/series/unidades_esc&file=pcaxis&l=s0"
#' mefd_down(mi_url)
#'
#' # Descarga un indicador específico a partir de url del .csv (url_ind)
#' mefd_down(url_ind = meta_mefd$url[190])
#'
#' # Descarga varios indicadores a partir del url del .csv (url_ind)
#' mefd_down(url_ind=meta_mefd$url[c(1, 5, 17)])
#' }
mefd_down <- function(url_ind = NULL, url_web = NULL, folder = getwd(), config = conf) {
### Error si indican ambos argumentos
if(all(!is.null(url_web), !is.null(url_ind))) {
message("You can't supply both 'url_ind' and 'url_web' at the same time")
return(NULL)
}
### Lee datos con url de la .csv (sin nombrar)
if(!is.null(url_ind)) {
if(length(url_ind)==1) {
df <- download.file(url = url_ind, destfile = file.path(folder, "datos.csv"))
} else
df <- lapply(seq_along(url_ind), function(x) download.file(url = url_ind[[x]],
destfile = file.path(folder, paste("datos_", x, ".csv"))))
}
### Lee datos con url de la pagina web (nombrando)
if(!is.null(url_web)) {
url_vec <- mefd_url(url_web=url_web, config = conf)
name_vec <- mefd_name(url_web=url_web, config = conf)
df <- lapply(seq_along(url_vec), function(x) download.file(url = url_vec[[x]],
destfile = file.path(folder, name_vec[[x]])))
}
}
library(roxygen2)
roxygen2::roxygenise()
#' metadata de indicadores
#' @export
#' @description
#' Genera metadata para indicadores a partir de url del MEFD: nombre de archivos,
#' urls de archivos, nombre del indicador
#'
#' @param url_web url de página web del MEFD con lista de indicadores
#' @param config lista con parámetros de configuración (default)
#' @return tibble con metadatos
#' @importFrom rvest html_attr html_elements html_text read_html
#' @importFrom stringr str_match
#'
#' @examples
#' \dontrun{
#' mi_url <- "https://estadisticas.educacion.gob.es/EducaDynPx/educabase/index.htm?type=pcaxis&path=/no-universitaria/centros/centrosyunid/series/unidades_esc&file=pcaxis&l=s0"
#' mefd_meta(mi_url)
#' }
mefd_meta <- function(url_web, config = conf) {
pg <- read_html(url_web)
### Titulo de la pagina web
tit <- rvest::html_elements(pg, "h1")
tit <- trimws(rvest::html_text(tit))
### Nodos <a
pg_a <- rvest::html_elements(pg, "a")
### Titulo de base de datos del indicador
tit_ind <- sapply(pg_a, function(x) stringr::str_match(as.character(x), conf$tit_p)[,2])
tit_ind <- unique(tit_ind[!is.na(tit_ind)])
### Lee atributos 'href'(ruta de la tabla)
href <- rvest::html_attr(pg_a, "href")
href <- href[!is.na(href)]
href <- href[nchar(href)>1]
href <- grep(conf$tabpx, href, value = TRUE)
### Extrae nombre del archivo .csv
file <- unique(stringr::str_match(href, conf$file_p)[,2])
file <- file[!is.na(file)]
file <- paste0(file, ".csv")
### Genera url para .csv
url_3 <- paste0(unique(stringr::str_match(href, conf$pre_p)[,2]), "/")
base_url <- paste0(conf$url_1, conf$url_2, url_3)
myurl <- paste0(base_url, file, conf$suf_url)
### Nombre de archivos .csv
file <- mefd_name(url_web=url_web, config = conf)
myurl <- mefd_url(url_web=url_web)
### tibble metadata
df <- data.frame(tit_ind, file, myurl, tit)
names(df) <- c("indicador", "archivo", "url", "titulo")
return(df)
}
#' Nombre de indicadores
#' @export
#' @description
#' Genera vector con nombre de bases de datos (.csv) para cada indicador
#' a partir de url de la web
#'
#' @param url_web url de página web del MEFD con lista de indicadores
#' @param config lista con parámetros de configuración (default)
#' @return vector con el nombre de los archivos .csv
#' @importFrom rvest html_attr html_elements html_text read_html
#' @importFrom stringr str_match
#'
#' @examples
#' \dontrun{
#' mi_url <- "https://estadisticas.educacion.gob.es/EducaDynPx/educabase/index.htm?type=pcaxis&path=/no-universitaria/centros/centrosyunid/series/unidades_esc&file=pcaxis&l=s0"
#' mefd_name(mi_url)
#' }
mefd_name <- function(url_web, config = conf) {
### Lee atributos 'href'(ruta de la tabla)
pg <- read_html(url_web)
pg_a <- rvest::html_elements(pg, "a")
href <- rvest::html_attr(pg_a, "href")
href <- href[!is.na(href)]
href <- href[nchar(href)>1]
href <- grep(conf$tabpx, href, value = TRUE)
### Extrae nombre del archivo .csv
file <- unique(stringr::str_match(href, conf$file_p)[,2])
file <- file[!is.na(file)]
file <- paste0(file, ".csv")
return(file)
}
#' url de indicadores
#' @export
#' @description
#' Genera vector con urls de bases de datos (.csv) para cada indicador
#' a partir de url de la web
#'
#' @param url_web url de página web del MEFD con lista de indicadores
#' @param config lista con parámetros de configuración (default)
#' @return vector con urls de bases de datos (.csv)
#' @importFrom rvest html_attr html_elements html_text read_html
#' @importFrom stringr str_match
#'
#' @examples
#' \dontrun{
#' mi_url <- "https://estadisticas.educacion.gob.es/EducaDynPx/educabase/index.htm?type=pcaxis&path=/no-universitaria/centros/centrosyunid/series/unidades_esc&file=pcaxis&l=s0"
#' mefd_url(mi_url)
#' }
mefd_url <- function(url_web, config = conf) {
### Lee atributos 'href'(ruta de la tabla)
pg <- rvest::read_html(url_web)
pg_a <- rvest::html_elements(pg, "a")
href <- rvest::html_attr(pg_a, "href")
href <- href[!is.na(href)]
href <- href[nchar(href)>1]
href <- grep(conf$tabpx, href, value = TRUE)
### Extrae nombre del archivo .csv
file <- unique(stringr::str_match(href, conf$file_p)[,2])
file <- file[!is.na(file)]
file <- paste0(file, ".csv")
### Genera url para .csv
url_3 <- paste0(unique(stringr::str_match(href, conf$pre_p)[,2]), "/")
base_url <- paste0(conf$url_1, conf$url_2, url_3)
myurl <- paste0(base_url, file, conf$suf_url)
return(myurl)
}
#' Lee datos de indicadores
#' @export
#' @description
#' Lee bases de datos (.csv) de indicadores a partir de página web (url_web) O
#' url de .csv (url_ind). El usuaRio debe eligir uno de los dos argumentos.
#' No es posible elegir ambos.
#'
#' @param url_ind url(s) de la bases de datos (.csv) del indicador
#' @param url_web url de página web del MEFD con lista de indicadores
#' @param config lista con parámetros de configuración (default)
#' @return data.frame o lista de data.frames con datos de indicadores
#' @importFrom rvest html_attr html_elements html_text read_html
#' @importFrom stringr str_match
#' @importFrom utils read.csv2
#'
#' @examples
#' \dontrun{
#' # Lectura desde página web (url_web)
#' mi_url <- "https://estadisticas.educacion.gob.es/EducaDynPx/educabase/index.htm?type=pcaxis&path=/no-universitaria/centros/centrosyunid/series/unidades_esc&file=pcaxis&l=s0"
#' df <- mefd_read(mi_url)
#'
#' # Lectura de un indicador específico a partir de url del .csv (url_ind)
#' df <- mefd_read(url_ind = meta_mefd$url[190])
#'
#' # Lectura de varios indicadores a partir del url del .csv (url_ind)
#' df <- mefd_read(url_ind=meta_mefd$url[c(1, 5, 17)])
#' }
mefd_read <- function(url_ind = NULL, url_web = NULL, config = conf) {
### Error si indican ambos argumentos
if(all(!is.null(url_web), !is.null(url_ind))) {
message("You can't supply both 'url_ind' and 'url_web' at the same time")
return(NULL)
}
### Lee datos con url de la .csv (sin nombrar)
if(!is.null(url_ind)) {
if(length(url_ind)==1) {
df <- read.csv2(url(url_ind))
} else
df <- lapply(url_ind, function(x) read.csv2(url(x)))
return(df)
}
### Lee datos con url de la pagina web (nombrando)
if(!is.null(url_web)) {
url_vec <- mefd_url(url_web=url_web, config = conf)
df <- lapply(url_vec, function(x) read.csv2(url(x)))
names(df) <- mefd_name(url_web=url_web, config = conf)
return(df)
}
}
#' Descarga datos de indicadores
#' @export
#' @description
#' Descarga bases de datos (.csv) de indicadores a partir de página web (url_web) O
#' url de .csv (url_ind). El usuaRio debe eligir uno de los dos argumentos.
#' No es posible elegir ambos.
#'
#' @param url_ind url(s) de la bases de datos (.csv) del indicador
#' @param url_web url de página web del MEFD con lista de indicadores
#' @param folder directorio donde guardar los datos
#' @param config lista con parámetros de configuración (default)
#' @return data.frame o lista de data.frames con datos de indicadores
#' @importFrom rvest html_attr html_elements html_text read_html
#' @importFrom stringr str_match
#' @importFrom utils read.csv2 download.file
#'
#' @examples
#' \dontrun{
#' # Descarga desde página web (url_web)
#' mi_url <- "https://estadisticas.educacion.gob.es/EducaDynPx/educabase/index.htm?type=pcaxis&path=/no-universitaria/centros/centrosyunid/series/unidades_esc&file=pcaxis&l=s0"
#' mefd_down(mi_url)
#'
#' # Descarga un indicador específico a partir de url del .csv (url_ind)
#' mefd_down(url_ind = meta_mefd$url[190])
#'
#' # Descarga varios indicadores a partir del url del .csv (url_ind)
#' mefd_down(url_ind=meta_mefd$url[c(1, 5, 17)])
#' }
mefd_down <- function(url_ind = NULL, url_web = NULL, folder = getwd(), config = conf) {
### Error si indican ambos argumentos
if(all(!is.null(url_web), !is.null(url_ind))) {
message("You can't supply both 'url_ind' and 'url_web' at the same time")
return(NULL)
}
### Lee datos con url de la .csv (sin nombrar)
if(!is.null(url_ind)) {
if(length(url_ind)==1) {
df <- download.file(url = url_ind, destfile = file.path(folder, "datos.csv"))
} else
df <- lapply(seq_along(url_ind), function(x) download.file(url = url_ind[[x]],
destfile = file.path(folder, paste("datos_", x, ".csv"))))
}
### Lee datos con url de la pagina web (nombrando)
if(!is.null(url_web)) {
url_vec <- mefd_url(url_web=url_web, config = conf)
name_vec <- mefd_name(url_web=url_web, config = conf)
df <- lapply(seq_along(url_vec), function(x) download.file(url = url_vec[[x]],
destfile = file.path(folder, name_vec[[x]])))
}
}
library(roxygen2)
roxygen2::roxygenise()
roxygen2::roxygenise()
remove.packages("mefdind")
dir <- "/home/eldani/MEGA/Work/Projects/Ongoing/mefd_stat/"
install.packages(file.path(dir, "mefdind_0.1.tar.gz"), repos=NULL, type='source')
dir <- "/home/eldani/MEGA/Work/Projects/Ongoing/mefd_stat/"
install.packages(file.path(dir, "mefdind_0.1.tar.gz"), repos=NULL, type='source')
mi_folder <- "/home/eldani/MEGA/Work/Projects/Ongoing/mefd_stat/work/datos/"
mefd_down(url_web = mi_url, folder = mi_folder)
mi_url <- "https://estadisticas.educacion.gob.es/EducaDynPx/educabase/index.htm?type=pcaxis&path=/no-universitaria/centros/sice/series&file=pcaxis&l=s0"
mi_folder <- "/home/eldani/MEGA/Work/Projects/Ongoing/mefd_stat/work/datos/"
mefd_down(url_web = mi_url, folder = mi_folder)
mefd_down(url_ind = meta_mefd$url[190], folder = mi_folder)
mefd_down(url_ind=meta_mefd$url[c(1, 3, 5)], folder = mi_folder)
500/0.02
500/0.04
500/0.06
library(roxygen2)
roxygen2::roxygenise()
library(roxygen2)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(roxygen2)
roxygen2::roxygenise()
mi_url <- paste0("https://estadisticas.educacion.gob.es/EducaDynPx/",
"educabase/index.htm?type=pcaxis&path=/no-universitaria/centros/",
"centrosyunid/series/unidades_esc&file=pcaxis&l=s0")
mi_url
roxygen2::roxygenise()
library(roxygen2)
roxygen2::roxygenise()
roxygen2::roxygenise()
library("devtools")
check()
library("devtools")
check()
library(roxygen2)
roxygen2::roxygenise()
roxygen2::roxygenise()
dir <- "/home/eldani/MEGA/Work/Projects/Ongoing/mefd_stat/package/work/"
par_url <- read.csv(file.path(dir, "par_url.csv"))
dir <- "/home/eldani/MEGA/Work/Projects/Ongoing/mefd_stat/package/work/"
par_url <- read.csv(file.path(dir, "par_url.csv"))
dir <- "/home/eldani/MEGA/Work/Projects/Ongoing/mefdind/work/"
par_url <- read.csv(file.path(dir, "par_url.csv"))
library("mefdind")
View(par_url)
meta_list <- lapply(par_url$url, mefd_meta)
meta_list1
meta_list[[1]]
meta_df <- do.call(bind_rows, meta_list)
library(tidyverse)
meta_df <- do.call(bind_rows, meta_list)
View(meta_df)
View(par_url)
par_url_rep <- par_url[rep(seq_len(nrow(par_url)), sapply(meta_list, nrow)), paste0("titulo_", 1:3)]
View(par_url)
View(meta_df)
names(meta_list)
View(par_url)
names(meta_list) <- par_url$url
names(meta_list)
meta_mefd <- cbind(meta_df, par_url_rep, row.names =  NULL)
View(meta_mefd)
dir <- "/home/eldani/MEGA/Work/Projects/Ongoing/mefdind/work/"
par_url <- read.csv(file.path(dir, "par_url.csv"))
meta_list <- lapply(par_url$url, mefd_meta)
# names(meta_list) <- par_url$url
# meta_df <- do.call(bind_rows, meta_list, .id = "")
meta_df <- do.call(bind_rows, meta_list)
par_url_rep <- par_url[rep(seq_len(nrow(par_url)), sapply(meta_list, nrow)), paste0("titulo_", 1:3)]
meta_mefd <- cbind(meta_df, par_url_rep, row.names =  NULL)
View(meta_mefd)
View(meta_df)
View(meta_mefd)
meta_mefd %>% group_by(titulo_1, titulo_2, titulo_3) %>%
summarise(_n)
meta_mefd %>% group_by(titulo_1, titulo_2, titulo_3) %>%
summarise(n= n())
meta_mefd %>% group_by(titulo_1, titulo_2, titulo_3) %>%
summarise(seq_along())
meta_mefd %>% group_by(titulo_1, titulo_2, titulo_3) %>%
summarise(seq_along)
meta_mefd %>% group_by(titulo_1, titulo_2, titulo_3) %>%
summarise(row_number())
class(meta_mefd$titulo_1)
as.numeric(meta_mefd$titulo_1)
as.numeric(as.factor(meta_mefd$titulo_1))
View(meta_mefd)
as.numeric(as.factor(meta_mefd$titulo_2))
as.numeric(as.factor(meta_mefd$titulo_1))
as.numeric(as.factor(meta_mefd$titulo_3))
meta_mefd <- mutate(meta_mefd , idserie = 1000*as.numeric(as.factor(titulo_1)) +
100*as.numeric(as.factor(titulo_2)) +
as.numeric(as.factor(titulo_3)))
View(meta_mefd)
meta_mefd %>% group_by(paste0("titulo_", 1:3)) %>%
mutate(id = row_number())
meta_mefd %>% group_by_at(paste0("titulo_", 1:3)) %>%
mutate(id = row_number())
meta_mefd <- meta_mefd %>% group_by_at(paste0("titulo_", 1:3)) %>%
mutate(id = row_number())
View(meta_mefd)
View(meta_mefd)
meta_mefd <- cbind(meta_df, par_url_rep, row.names =  NULL)
meta_mefd <-  meta_mefd %>%
group_by_at(paste0("titulo_", 1:3)) %>%
mutate(idserie = 10000*as.numeric(as.factor(titulo_1)) +
1000*as.numeric(as.factor(titulo_2)) +
100*as.numeric(as.factor(titulo_3)) + row_number())
View(meta_mefd)
meta_mefd <- cbind(meta_df, par_url_rep, row.names =  NULL)
meta_mefd <-  meta_mefd %>%
mutate(idserie = 10000*as.numeric(as.factor(titulo_1)) +
1000*as.numeric(as.factor(titulo_2)) +
100*as.numeric(as.factor(titulo_3))) %>%
group_by_at(paste0("titulo_", 1:3)) %>%
mutate(idserie = idserie + row_number())
View(meta_mefd)
unique(meta_mefd$idserie)
length(unique(meta_mefd$idserie))
as.numeric(as.factor(meta_mefd$titulo_1))
as.integer(as.factor(meta_mefd$titulo_1))
help(convert)
as.numeric(factor(meta_mefd$titulo_1, levels = unique(meta_mefd$titulo_1)))
meta_mefd <- cbind(meta_df, par_url_rep, row.names =  NULL)
meta_mefd <- cbind(meta_df, par_url_rep, row.names =  NULL)
meta_mefd <-  meta_mefd %>%
mutate(idserie = 10000*as.numeric(factor(titulo_1, levels = unique(titulo_1))) +
1000*as.numeric(factor(titulo_2, levels = unique(titulo_2))) +
100*as.numeric(factor(titulo_3, levels = unique(titulo_3)))) %>%
group_by_at(paste0("titulo_", 1:3)) %>%
mutate(idserie = idserie + row_number())
View(meta_df)
names(meta_mefd)
View(meta_df)
View(meta_mefd)
length(unique(meta_mefd$idserie))
#length(unique(meta_mefd$idserie))
dir <- "/home/eldani/MEGA/Work/Projects/Ongoing/mefdind/package/data/"
save(meta_mefd, par_url, file = file.path(dir, "meta.rda"))
View(meta_mefd)
##### Buscador de indicadores
grep("abandono", meta_mefd$indicador, value = TRUE)
##### Buscador de indicadores
grep("abandono", meta_mefd$indicador )
##### Buscador de indicadores
grep("infantil", meta_mefd$indicador )
##### Buscador de indicadores
grep("idoneidad", meta_mefd$indicador )
grep("idoneidad", meta_mefd$indicador, value = TRUE)
grep("primaria", meta_mefd$indicador, value = TRUE)
grep(toupper("primaria"), toupper(meta_mefd$indicador), value = TRUE)
meta_mefd[grep(toupper("primaria"), toupper(meta_mefd$indicador)), "indicador"]
meta_mefd[grep(toupper("primaria"), toupper(meta_mefd$indicador)), c("idserie", "indicador")]
mefd_search <- function(value, config = conf) {
index <- grep(toupper(value), toupper(meta_mefd$indicador))
output <- meta_mefd[index, c("idserie", "indicador")]
return(output)
}
mefd_search("sexo")
mefd_search("idoneidad")
mefd_search("primaria")
mefd_search(c("primaria", "sexo"))
mefd_search(c("primaria|sexo"))
mefd_search("primaria&sexo")
mefd_search("primaria")
mefd_search("primaria+sexo")
mefd_search("primaria.*sexo")
mefd_search("extranjero")
mefd_search("idoneidad")
mefd_search("primaria")
mefd_search("extranjero")
mefd_search("idoneidad")
mefd_search("primaria")
mefd_search("primaria.*sexo")
mefd_search("extranjero")
mefd_search("extranjero|idoneidad")
library(roxygen2)
roxygen2::roxygenise()
library(gitcreds)
gitcreds_set()
idserie = NULL
url_ind = NULL
url_web = NULL
help(all)
all(idserie, url_ind, url_web)
sapply(c(idserie, url_ind, url_web), is.null)
sapply(list(idserie, url_ind, url_web), is.null)
sapply(list(idserie, url_ind, url_web), !is.null)
sapply(list(idserie, url_ind, url_web), is.null)
all(sapply(list(idserie, url_ind, url_web), is.null))
any(sapply(list(idserie, url_ind, url_web), is.null))
all(sapply(list(idserie, url_ind, url_web), is.null))
all(sapply(list(idserie, url_ind, url_web), !is.null))
sapply(list(idserie, url_ind, url_web), is.null)
idserie = 2034
url_ind = NULL
url_web = NULL
sapply(list(idserie, url_ind, url_web), is.null)
all(sapply(list(idserie, url_ind, url_web), is.null))
sum(sapply(list(idserie, url_ind, url_web), is.null))
sapply(list(idserie, url_ind, url_web), is.null)
all(!sapply(list(idserie, url_ind, url_web), is.null))
!sapply(list(idserie, url_ind, url_web), is.null)
sapply(list(idserie, url_ind, url_web), is.null)
sum(!sapply(list(idserie, url_ind, url_web), is.null))
sum(!sapply(list(idserie, url_ind, url_web), is.null)) == 1
sum(!sapply(list(idserie, url_ind, url_web), is.null)) != 1
sum(!sapply(list(idserie, url_ind, url_web), is.null)) != 1
idserie = 2034
url_ind = 500
url_web = NULL
sum(!sapply(list(idserie, url_ind, url_web), is.null)) != 1
!sapply(list(idserie, url_ind, url_web), is.null))
!sapply(list(idserie, url_ind, url_web), is.null)
help("if_any")
help(any)
!sapply(list(idserie, url_ind, url_web), is.null)
!sapply(list(idserie, url_ind, url_web), is.null)
any(!sapply(list(idserie, url_ind, url_web), is.null))
sum(!sapply(list(idserie, url_ind, url_web), is.null)) != 1
url_web = 4
!sapply(list(idserie, url_ind, url_web), is.null)
sum(!sapply(list(idserie, url_ind, url_web), is.null)) != 1
idserie = NULL
url_ind = 500
url_web = NULL
sum(!sapply(list(idserie, url_ind, url_web), is.null)) != 1
url_ind = NULL
idserie = NULL
url_ind = NULL
url_web = NULL
sum(!sapply(list(idserie, url_ind, url_web), is.null)) != 1
View(meta_mefd)
class(meta_mefd$idserie)
View(meta_mefd)
meta_mefd[meta_mefd$idserie %in% 11109, "url"]
View(meta_mefd)
meta_mefd[meta_mefd$idserie %in% c(11109, 11125, 37002), "url"]
meta_mefd[meta_mefd$idserie %in% 11109, "url"]
class(meta_mefd[meta_mefd$idserie %in% 11109, "url"])
meta_mefd[meta_mefd$idserie %in% 11109]$url
meta_mefd$url[meta_mefd$idserie %in% 11109]
class(meta_mefd$url[meta_mefd$idserie %in% 11109])
meta_mefd$url[meta_mefd$idserie %in% c(11109, 11125, 37002)]
library(roxygen2)
roxygen2::roxygenise()
library(roxygen2)
roxygen2::roxygenise()
library(roxygen2)
roxygen2::roxygenise()
